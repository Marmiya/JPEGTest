const DCT_C: [[f32; 8]; 8] = [
    [0.35355, 0.35355, 0.35355, 0.35355, 0.35355, 0.35355, 0.35355, 0.35355],
    [0.49039, 0.41573, 0.27779, 0.09755, -0.09755, -0.27779, -0.41573, -0.49039],
    [0.46194, 0.19134, -0.19134, -0.46194, -0.46194, -0.19134, 0.19134, 0.46194],
    [0.41573, -0.09755, -0.49039, -0.27779, 0.27779, 0.49039, 0.09755, -0.41573],
    [0.35355, -0.35355, -0.35355, 0.35355, 0.35355, -0.35355, -0.35355, 0.35355],
    [0.27779, -0.49039, 0.09755, 0.41573, -0.41573, -0.09755, 0.49039, -0.27779],
    [0.19134, -0.46194, 0.46194, -0.19134, -0.19134, 0.46194, -0.46194, 0.19134],
    [0.09755, -0.27779, 0.41573, -0.49039, 0.49039, -0.41573, 0.27779, -0.09755],
];

const DCT_C_INV: [[f32; 8]; 8] = [
    [0.35355, 0.49039, 0.46194, 0.41573, 0.35355, 0.27779, 0.19134, 0.09755],
    [0.35355, 0.41573, 0.19134, -0.09755, -0.35355, -0.49039, -0.46194, -0.27779],
    [0.35355, 0.27779, -0.19134, -0.49039, -0.35355, 0.09755, 0.46194, 0.41573],
    [0.35355, 0.09755, -0.46194, -0.27779, 0.35355, 0.41573, -0.19134, -0.49039],
    [0.35355, -0.09755, -0.46194, 0.27779, 0.35355, -0.41573, -0.19134, 0.49039],
    [0.35355, -0.27779, -0.19134, 0.49039, -0.35355, -0.09755, 0.46194, -0.41573],
    [0.35355, -0.41573, 0.19134, 0.09755, -0.35355, 0.49039, -0.46194, 0.27779],
    [0.35355, -0.49039, 0.46194, -0.41573, 0.35355, -0.27779, 0.19134, -0.09755],
];

fn matrix_multiply(a: &[[f32; 8]; 8], b: &[[f32; 8]; 8]) -> [[f32; 8]; 8] {
    let mut result = [[0.0; 8]; 8];
    for i in 0..8 {
        for j in 0..8 {
            for k in 0..8 {
                result[i][j] += a[i][k] * b[k][j];
            }
        }
    }
    result
}

pub fn dct_transform(block: &[[f32; 8]; 8]) -> [[f32; 8]; 8] {
    let temp = matrix_multiply(&DCT_C, &block);
    matrix_multiply(&temp, &DCT_C_INV)
}

pub fn idct_transform(block: &[[f32; 8]; 8]) -> [[f32; 8]; 8] {
    let temp = matrix_multiply(&DCT_C_INV, &block);
    matrix_multiply(&temp, &DCT_C)
}